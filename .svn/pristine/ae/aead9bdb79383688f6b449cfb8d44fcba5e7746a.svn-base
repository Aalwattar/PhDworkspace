/*
 * data.h
 *
 *  Created on: Jun 1, 2011
 *      Author: ahmed
 */

#ifndef DATA_H_
#define DATA_H_

#include "headers.h"
#include "timer.h"
/* TODO use more compact structure
 * by using btwise operators and one words for all flags
 */


#define TASK_1_HW_DELAY 20000000LU  // add Same HW/SW
#define TASK_1_SW_DELAY (TASK_1_HW_DELAY )
#define TASK_2_HW_DELAY 20000000LU  // sub  HW/0.75SW
#define TASK_2_SW_DELAY (TASK_2_HW_DELAY /2)
#define TASK_3_HW_DELAY 80000000LU  // mult HW/1.5 SW
#define TASK_3_SW_DELAY (TASK_3_HW_DELAY *1.2 )
#define TASK_4_HW_DELAY 20000000LU  // shift HW /2.5 SW
#define TASK_4_SW_DELAY (TASK_4_HW_DELAY *3 )
#define TASK_5_HW_DELAY 20000000LU  // add
#define TASK_5_SW_DELAY (TASK_5_HW_DELAY )
#define TASK_6_HW_DELAY 20000000LU  // add
#define TASK_6_SW_DELAY (TASK_6_HW_DELAY )
#define TASK_7_HW_DELAY 20000000LU  // add
#define TASK_7_SW_DELAY (TASK_7_HW_DELAY )
#define TASK_8_HW_DELAY 20000000LU  // add
#define TASK_8_SW_DELAY (TASK_8_HW_DELAY )
#define TASK_9_HW_DELAY 20000000LU  // add
#define TASK_9_SW_DELAY (TASK_9_HW_DELAY )
#define TASK_10_HW_DELAY 20000000LU  // add
#define TASK_10_SW_DELAY (TASK_10_HW_DELAY )


enum Mode {SWOnly=0x0001,HWOnly=0x0002,HybSW=0x0003,HybHW=0x0013, CustomHW=0x0004,
           CustomHWnSW=0x0005
          };
enum Operations {OpAdd,OpSub,OPMult,OpShift,OpBlank};

struct Simulation
{
	enum PRRID PRRUsed;
	u8 Reused;
	 struct TimerTime ConfigTime;
	 struct TimerTime ExecTime;
	struct TimerValue ExecTV;

};

/*
 * store time delay for software and hardware
 * TODO delete this
 */
struct Emulation
{
	Xuint32 HWdelay;
	Xuint32 SWdelay;
};
struct data {
        int op1;
        int op2;
        unsigned  isAdd_op1 : 1;
        unsigned  isAdd_op2: 1;
        unsigned :0 ;
};
struct PRRProcess {
        int No;
        enum PRRID PRR_ID[MAX_PR_MODULES];
};

/* TODO sperate this structure into seprate structure one is read only and the other is read/write */
struct node {
        const Xuint32 id;
        const u8 operation;
         enum Mode mode;
   //     const struct PRRProcess PRRP; // not used remove it
        const u32 next;
        const struct data D;
        u8 Done ; // move to a seperate struct
        int result; // move to a seperate struct
        int Q; // move to a seperate struct ( write an init function to start this as NO)
        Xuint32 initPrio; // initial priority to start with
       // Xuint32 dl; // not used delete
        struct Simulation Sim; // move to a seperate struct
        struct Emulation Emu;
        Xuint32 CanRun;
        int TypeID;

};

struct TaskType{
	int ID;
	char * name;
	Xuint32 SWET;
	Xuint32 HWET;
	int SWPriority;
	int ConfigTime[MAX_PR_MODULES];
	Xuint32 CanRun;
	enum PRModules Module;

};

/* TODO DFG must be read from external memory
 *  A agreed structure must be developed
 *  and specification for the file format
 */
enum SystemStates {Start,CfgDone,TaskDone,None};

extern enum SystemStates State;

extern  struct node dfg1[];
extern struct TaskType TasksTypes[];
void Init_TasksTypes(void);

#endif /* DATA_H_ */
