/*
 * tasksgeneration.c
 *
 *  Created on: Jun 14, 2012
 *      Author: ahmed
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include "utility.h"
#include "genConfig.h"
#include "dfggen.h"
#include "graph.h"
#include "parseArgs.h"

struct globalArgs globalArgs;

/* Description: 
 *  Parse command line arguments into global structure, 'globalArgs'  
 * Parameters:
 *  -char *argv[], an array of pointers to strings, analogous to argv found in
 *      main parameters.
 *  -int argc, represents the size of argv array, analogous to argc found in
 *      main parameters
 * Return:
 *   0 for error, 1 for success
 */
static int parseArgs(int argc, char *argv[]){
    int c;
    extern char *optarg;
    extern int optind, optopt;
    
    int errflg = 0;
    while ((c = getopt(argc, argv, "f:g:n:d:t:a:")) != -1) {
        switch(c) {
            case 'f':
                globalArgs.dfg_filename = optarg;
                break;     
            case 'g':
                globalArgs.dotgraph_filename = optarg;
                break;
            case 'n':
                globalArgs.no_of_nodes = atoi( optarg );
                break;
            case 'd':
                globalArgs.dep_per_node = atoi( optarg );
                break;
            case 't':
                globalArgs.no_of_types = atoi ( optarg );
                break;
            case 'a':
                globalArgs.total_dep_no = atoi ( optarg );
                break;    
            case ':':       /* -f or -o without operand */
                    fprintf( stderr, "Option -%c requires an operand\n", optopt );
                    break;
            case '?':
                    fprintf( stderr, "Unrecognized option: -%c\n", optopt );
        }
    }

    if ( errflg > 0 || argc < 2 ) {
        fprintf(stderr, "\nusage: -f <dfg filename> -g <dotgraph filename> -n "
        "<number of nodes> -d <dependencies per node> -t <number of types> -a "
        "<total dependencies number>\n\n");
        return 0;
    } 

    return 1;
}

int main (int argc, char *argv[])
{    
    //Set default values defined in genConfig.h
    globalArgs.dfg_filename = DFG_FILENAME;
    globalArgs.dotgraph_filename = DOTGRAPH_FILENAME;
    globalArgs.no_of_nodes = NO_OF_NODES;
    globalArgs.dep_per_node = DEP_PER_NODE;
    globalArgs.no_of_types = NO_OF_TYPES;
    globalArgs.total_dep_no = TOTAL_DEP_NO;
    
    if ( 0 == parseArgs( argc, argv ) ){
        printf ( "Using all default defined values:\n" );
    } else { 
       printf ( "Graph values:\n" );
    }

    printf ("    dfg filename = %s\n", globalArgs.dfg_filename);
    printf ("    dotgraph filename = %s\n", globalArgs.dotgraph_filename);
    printf ("    no of nodes = %d\n", globalArgs.no_of_nodes);
    printf ("    dep per node = %d\n",globalArgs.dep_per_node);
    printf ("    no of types = %d\n",globalArgs.no_of_types);
    printf ("    total dep no = %d\n\n", globalArgs.total_dep_no);

    /* Variable definitions */
	FILE *fpRandom; /* open the /dev/urandom for getting random numbers */
	FILE *fpDFG; /* Handler for DFG file structure */
	FILE *fpDot; /* Handler for the graph .dot file strucuture */
	struct genmatrix  lgenmatrix ;
	struct genmatrix  *lgenmatrixp=&lgenmatrix ;
	char dfgFileName[255];
	char dotFileName[255];
	sprintf(dfgFileName,"%s_%d_%d_%d.txt", globalArgs.dfg_filename
            ,globalArgs.no_of_nodes,globalArgs.total_dep_no,globalArgs.dep_per_node);
	sprintf(dotFileName,"%s_%d_%d_%d.dot",globalArgs.dotgraph_filename,globalArgs.no_of_nodes,globalArgs.total_dep_no,globalArgs.dep_per_node);
    
    fpRandom=openfile("/dev/urandom","r");
    fpDFG=openfile(dfgFileName,"w");
    fpDot=openfile(dotFileName,"w");
    initGenMatrix(lgenmatrixp,globalArgs.no_of_nodes,globalArgs.dep_per_node,globalArgs.no_of_types);
    genTasksMatrix(lgenmatrixp , globalArgs.total_dep_no);

    writeDFG(fpDFG, dfgFileName, lgenmatrixp );

    writeGraphDot(fpDot, lgenmatrixp );
    typeStat(lgenmatrixp);


//	for (i=0;i<TASKS_TYPES;i++)
//		stat[i]=0;struct genmatrix  lgenmatrix ;
//
//
////fprintf(fpcDFG,"\n\nstruct  node dfg1[]  = {\n");
//
//	for (i=0;i<TASKS_TYPES;i++)
//	{ count+=stat[i];
//		printf("Tasks [%d] repeated [%d] >> [%d%%]\n",i,stat[i],((stat[i]*100)/MAX_NODES));
//	}
//
//  printf("total tasks = [%d]",count);


    freeGenMatrix(lgenmatrixp);
	fclose(fpRandom);
	fclose(fpDFG);
	fclose(fpDot);
	return EXIT_SUCCESS;
}


